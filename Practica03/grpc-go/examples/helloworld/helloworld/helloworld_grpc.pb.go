// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: helloworld/helloworld.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Greeter_SayHello_FullMethodName            = "/helloworld.Greeter/SayHello"
	Greeter_DimeCentroDiana_FullMethodName     = "/helloworld.Greeter/dimeCentroDiana"
	Greeter_DisparaCannon_FullMethodName       = "/helloworld.Greeter/disparaCannon"
	Greeter_MejorDisparo_FullMethodName        = "/helloworld.Greeter/mejorDisparo"
	Greeter_SayHelloStreamReply_FullMethodName = "/helloworld.Greeter/SayHelloStreamReply"
	Greeter_SayHelloBidiStream_FullMethodName  = "/helloworld.Greeter/SayHelloBidiStream"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	DimeCentroDiana(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Distancia, error)
	DisparaCannon(ctx context.Context, in *DisparaCannonArgs, opts ...grpc.CallOption) (*DisparaCannonReturn, error)
	MejorDisparo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MejorDisparoReturn, error)
	SayHelloStreamReply(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloReply], error)
	SayHelloBidiStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HelloRequest, HelloReply], error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Greeter_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) DimeCentroDiana(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Distancia, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Distancia)
	err := c.cc.Invoke(ctx, Greeter_DimeCentroDiana_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) DisparaCannon(ctx context.Context, in *DisparaCannonArgs, opts ...grpc.CallOption) (*DisparaCannonReturn, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisparaCannonReturn)
	err := c.cc.Invoke(ctx, Greeter_DisparaCannon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) MejorDisparo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MejorDisparoReturn, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MejorDisparoReturn)
	err := c.cc.Invoke(ctx, Greeter_MejorDisparo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayHelloStreamReply(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], Greeter_SayHelloStreamReply_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloRequest, HelloReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Greeter_SayHelloStreamReplyClient = grpc.ServerStreamingClient[HelloReply]

func (c *greeterClient) SayHelloBidiStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HelloRequest, HelloReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[1], Greeter_SayHelloBidiStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloRequest, HelloReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Greeter_SayHelloBidiStreamClient = grpc.BidiStreamingClient[HelloRequest, HelloReply]

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility.
//
// The greeting service definition.
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	DimeCentroDiana(context.Context, *emptypb.Empty) (*Distancia, error)
	DisparaCannon(context.Context, *DisparaCannonArgs) (*DisparaCannonReturn, error)
	MejorDisparo(context.Context, *emptypb.Empty) (*MejorDisparoReturn, error)
	SayHelloStreamReply(*HelloRequest, grpc.ServerStreamingServer[HelloReply]) error
	SayHelloBidiStream(grpc.BidiStreamingServer[HelloRequest, HelloReply]) error
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreeterServer struct{}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) DimeCentroDiana(context.Context, *emptypb.Empty) (*Distancia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DimeCentroDiana not implemented")
}
func (UnimplementedGreeterServer) DisparaCannon(context.Context, *DisparaCannonArgs) (*DisparaCannonReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisparaCannon not implemented")
}
func (UnimplementedGreeterServer) MejorDisparo(context.Context, *emptypb.Empty) (*MejorDisparoReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MejorDisparo not implemented")
}
func (UnimplementedGreeterServer) SayHelloStreamReply(*HelloRequest, grpc.ServerStreamingServer[HelloReply]) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloStreamReply not implemented")
}
func (UnimplementedGreeterServer) SayHelloBidiStream(grpc.BidiStreamingServer[HelloRequest, HelloReply]) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloBidiStream not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}
func (UnimplementedGreeterServer) testEmbeddedByValue()                 {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	// If the following call pancis, it indicates UnimplementedGreeterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_DimeCentroDiana_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).DimeCentroDiana(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_DimeCentroDiana_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).DimeCentroDiana(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_DisparaCannon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisparaCannonArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).DisparaCannon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_DisparaCannon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).DisparaCannon(ctx, req.(*DisparaCannonArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_MejorDisparo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).MejorDisparo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_MejorDisparo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).MejorDisparo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayHelloStreamReply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).SayHelloStreamReply(m, &grpc.GenericServerStream[HelloRequest, HelloReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Greeter_SayHelloStreamReplyServer = grpc.ServerStreamingServer[HelloReply]

func _Greeter_SayHelloBidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).SayHelloBidiStream(&grpc.GenericServerStream[HelloRequest, HelloReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Greeter_SayHelloBidiStreamServer = grpc.BidiStreamingServer[HelloRequest, HelloReply]

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
		{
			MethodName: "dimeCentroDiana",
			Handler:    _Greeter_DimeCentroDiana_Handler,
		},
		{
			MethodName: "disparaCannon",
			Handler:    _Greeter_DisparaCannon_Handler,
		},
		{
			MethodName: "mejorDisparo",
			Handler:    _Greeter_MejorDisparo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloStreamReply",
			Handler:       _Greeter_SayHelloStreamReply_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloBidiStream",
			Handler:       _Greeter_SayHelloBidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloworld/helloworld.proto",
}
